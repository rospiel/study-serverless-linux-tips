# aws configure set default.region us-east-1 
# aws cloudformation create-stack --stack-name shortener-network --template-body file://network.template.yaml
# aws cloudformation update-stack --stack-name shortener-network --template-body file://network.template.yaml
# aws cloudformation delete-stack --stack-name shortener-network

Description: Network infrastructure
Parameters:
  VpcCidr:
    Description: CIDR block for the VpcCidr
    Type: String
    Default: 10.192.0.0/16
  PrivateSubnet1Cidr:
    Description: CIDR block for the private subnet 1
    Type: String
    Default: 10.192.10.0/24
  PrivateSubnet2Cidr:
    Description: CIDR block for the private subnet 2
    Type: String
    Default: 10.192.20.0/24
  PrivateSubnet3Cidr:
    Description: CIDR block for the private subnet 3
    Type: String
    Default: 10.192.30.0/24    
  PublicSubnet1Cidr:  
    Description: CIDR block for the public subnet 1
    Type: String
    Default: 10.192.110.0/24    
  PublicSubnet2Cidr:  
    Description: CIDR block for the public subnet 2
    Type: String
    Default: 10.192.120.0/24    
  PublicSubnet3Cidr:  
    Description: CIDR block for the public subnet 3
    Type: String
    Default: 10.192.130.0/24        


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true 
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs "" ]    
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet1"
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs "" ]    
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet2"
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet3Cidr
      AvailabilityZone: !Select [ 2, !GetAZs "" ]    
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet3"
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicRouteTable"
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"        
      GatewayId: !Ref InternetGateway
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet1"
  PublicSubnet1RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet2"
  PublicSubnet2RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet3Cidr
      AvailabilityZone: !Select [ 2, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet3"
  PublicSubnet3RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable        
                
Outputs:      
  VpcId:
    Description: VPC ID
    Value: !Ref VPC
    # Allow to access in another template the id
    Export:
      Name: !Sub '${AWS::StackName}:VpcId'

  PrivateSubnet1Id:  
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${AWS::StackName}:PrivateSubnet1'

  PrivateSubnet2Id:  
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${AWS::StackName}:PrivateSubnet2'
    
  PrivateSubnet3Id:  
    Description: Private Subnet 3 ID
    Value: !Ref PrivateSubnet3  
    Export:
      Name: !Sub '${AWS::StackName}:PrivateSubnet3'

  PublicSubnet1Id:  
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1    
  
  PublicSubnet2Id:  
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
  
  PublicSubnet3Id:  
    Description: Public Subnet 3 ID
    Value: !Ref PublicSubnet3